
/*!

\file

\brief Однослойные и многослойные перцептроны.

Последовательность действий по использованию перцептрона:

	-# Создать перцептрон с помощью функции fmll_perceptron_init();
	-# Обучить перцептрон с помощью одной из *_teach_* функций;
	-# Прогнать перцептрон над целевыми векторами с помощью функции fmll_perceptron_run();
	-# Удалить перцептрон с помощью функции fmll_perceptron_destroy().

*/

#ifndef PERCEPTRON_H
#define PERCEPTRON_H

#include "all.h"
#include "exception.h"
#include "memory.h"

// ############################################################################

/*!

\brief Описатель перцептрона.

*/
typedef struct t_fmll_perceptron
{

	/*! Массив нейронов. */
	double ** w;

	/*! Вектор выходных значений. */
	double * y;

	/*! Размерность входного вектора. */
	uint8_t dim;

	/*! Количество скрытых слоев. */
	uint8_t layers_num;

	/*! Количество нейронов в каждом из скрытых слоев. */
	uint16_t * N;

	/*! Суммарное количество нейронов во всех скрытых слоях. */
	uint32_t num;

	/*! Массив функций активаций (своя функция активации для каждого из скрытых слоев). */
	double (** fun)(double);

	/*! Массив производных функций активаций. */
	double (** d_fun)(double);

	/*! \cond HIDDEN_SYMBOLS */

	double * t_y;

	/*! \endcond */

} fmll_perceptron;

// ############################################################################

/*!

\brief Создание перцептрона.

\param dim - размер входного вектора;
\param layers_num - количество скрытых слоев;
\param N - количество нейронов в каждом из скрытых слоев;
\param weight_init - указатель на функцию, инициализирующую веса синапсов нейронов;
\param fun - массив функций активаций (своя функция активации для каждого из скрытых слоев);
\param d_fun - массив производных функций активаций.

\return

	- указатель на описатель перцептрона в случае успешного создания перцептрона;
	- NULL в случае неудачи.

*/
fmll_perceptron * fmll_perceptron_init(uint8_t dim, uint8_t layers_num, const uint16_t * N,
		double (* weight_init)(), double (** fun)(double), double (** d_fun)(double));

/*!

\brief Удаление перцептрона.

\param perc - указатель на описатель перцептрона.

*/
void fmll_perceptron_destroy(fmll_perceptron * perc);

/*!

\brief Прогон перцептрона над некоторым вектором.

\param perc - указатель на описатель перцептрона;
\param vec - некоторый вектор.

\return указатель на массив выходных значений перцептрона.

*/
double * fmll_perceptron_run(fmll_perceptron * perc, const double * vec);

/*!

\brief TODO.

\param perc - дескриптор перцептрона;
\param vec - массив обучающих векторов;
\param vec_num - количество векторов в массиве обучающих векторов;
\param beta_0 - начальное значение скорости обучения, \f$\beta_0 ~ \in ~ [0, 1]\f$;
\param next_beta - указатель на функцию, пересчитывающую значение скорости обучения в начале каждой итерации обучения по значению скорости обучения на предыдущей итерации.

\return

	- 0 - в случае успеха;
	- <> 0 - в случае неудачи.

*/
int8_t fmll_perceptron_teach_gradient(fmll_perceptron * perc, double ** vec, uint32_t vec_num, double beta_0, double (* next_beta)(double));

// ############################################################################

#endif

