
/*!

\file

\brief Нейронная сеть, состоящая из нескольких машин опорных векторов (SVM; Support Vector Machine).

Последовательность действий по использованию нейронной сети, состоящей из нескольких машин опорных векторов:

	-# Создать нейронную сеть с помощью функции fmll_svm_net_init();
	-# Обучить нейронную сеть с помощью одной из *_svm_net_teach_* функций;
	-# Прогнать нейронную сеть над целевыми векторами с помощью функции fmll_svm_net_run();
	-# Удалить нейронную сеть с помощью функции fmll_svm_net_destroy().

*/

#ifndef SVM_NET_H
#define SVM_NET_H

#ifdef BUILD

	#include "all.h"
	#include "exception.h"
	#include "memory.h"
	#include "svm.h"
	#include "xml.h"

#endif

// ############################################################################

/*!

\brief Описатель нейронной сети, состоящей из нескольких машин опорных векторов.

*/
typedef struct t_fmll_svm_net
{

	/*! Количество машин опорных векторов в сети. */
	unsigned num;

	/*! Массив указателей на описатели машин опорных векторов. */
	fmll_svm ** svm;

} fmll_svm_net;

// ############################################################################ 

/*!

\brief Создание нейронной сети, состоящей из нескольких машин опорных векторов.

\param num - количество машин опорных векторов;
\param dim - размерность векторного пространства;
\param K - массив указателей на функции, вычисляющие ядра скалярных произведений.

\return

	- указатель на описатель нейронной сети, состоящей из нескольких машин опорных векторов, в случае его успешного создания;
	- NULL в случае неудачи.

*/
fmll_svm_net * fmll_svm_net_init(unsigned num, unsigned dim, double (** K)(const double *, const double *, unsigned));

/*!

\brief Удаление нейронной сети, состоящей из нескольких машин опорных векторов.

\param svm_net - указатель на описатель нейронной сети, состоящей из нескольких машин опорных векторов.

*/
void fmll_svm_net_destroy(fmll_svm_net * svm_net);

/*!

\brief Сохранение в XML-файл описателя нейронной сети, состоящей из нескольких машин опорных векторов.

\param svm_net - указатель на описатель нейронной сети;
\param fname_prefix - путь и имя XML-файла (к строке fname_prefix будет добавлено расширение .xml).

\return

	- 0 - в случае успешного сохранения описателя нейронной сети;
	- <> 0 - в случае некорректного завершения операции сохранения описателя нейронной сети.

*/
int fmll_svm_net_save(fmll_svm_net * svm_net, const char * fname_prefix);

/*!

\brief Загрузка из XML-файла описателя нейронной сети, состоящей из нескольких машин опорных векторов.

\param fname_prefix - путь и имя XML-файла (к строке fname_prefix будет добавлено расширение .xml);
\param K - массив указателей на функции, вычисляющие ядра скалярных произведений.

\return

	- указатель на описатель нейронной сети в случае его успешной загрузки;
	- NULL - в случае некорректного завершения операции загрузки описателя нейронной сети.

*/
fmll_svm_net * fmll_svm_net_load(const char * fname_prefix, double (** K)(const double *, const double *, unsigned));

/*!

\brief Прогон нейронной сети, состоящей из нескольких машин опорных векторов, над вектором.

\param svm_net - указатель на описатель нейронной сети;
\param vec - указатель на вектор;
\param y - указатель на массив, в который будут записаны результаты прогона каждой из SVM, составляющих нейронную сеть, над целевым вектором.

Параметр y может принимать значение NULL.

\return

	- номер машины опорных векторов, давшей результат, равный 1, если таковая машина опорных векторов одна;
	- -1 - если ни одна из машин опорных векторов не дала результат, равный 1;
	- -2 - если несколько машин опорных векторов дали результат, равный 1;
	- < -2 - в случае невозможности корректно завершить прогон машины опорных векторов над целевым вектором.

*/
int fmll_svm_net_run(fmll_svm_net * svm_net, const double * vec, double * y);

/*!

\brief Тестирование нейронной сети, состоящей из нескольких машин опорных векторов.

\param svm_net - указатель на описатель нейронной сети;
\param vec - тестовое множество векторов;
\param d - множество эталонных откликов;
\param vec_num - количество векторов в тестовом множестве векторов;
\param st_func - указатель на функцию, вызываемую после прогона нейронной сети над каждым вектором из тестового множества (может принимать значение NULL);
\param st_param - один из параметров функции (* st_func)() (если параметр st_func установлен в значение NULL, параметр st_param не используется).

Функция (* st_func) обладает следующими параметрами:

	-# указатель на описатель нейронной сети;
	-# указатель на обрабатываемый вектор;
	-# номер класса, к которому относится вектор;
	-# выход нейронной сети;
	-# указатель на вектор выходов машин опорных векторов, составляющих нейронную сеть;
	-# количество векторов в тестовом множестве векторов;
	-# булева переменная, установленная в true, если обрабатываемый	вектор классифицирован правильно, и установленная в false - в противном случае;
	-# значение параметра st_param.

\return количество векторов из тестового множества векторов, классифицированных правильно.

*/
unsigned fmll_svm_net_test(fmll_svm_net * svm_net, double ** vec, unsigned * d, unsigned vec_num,
		void (* st_func)(fmll_svm_net *, double *, unsigned, int, const double *, unsigned, bool, void *), void * st_param);

/*!

\brief Обучение нейронной сети, состоящей из нескольких машин опорных векторов, по алгоритму Sequential Minimal Optimization (SMO).

\param svm_net - указатель на описатель нейронной сети;
\param vec - множество обучающих векторов;
\param d - номера классов обучающих векторов ([0, num - 1], где num - количество машин опорных векторов в сети);
\param vec_num - мощность множества обучающих векторов;
\param C - массив ширины полос поиска коэффициентов \f$\lambda\f$;
\param tau - массив малых положительных чисел, в некоторых эвристиках используемых при выборе второго из множителей Лагранжа - кандидатов на оптимизацию;
\param selector - массив указателей на функции, выбирающих пару множителей Лагранжа - кандидатов на оптимизацию на очередной итерации алгоритма;
\param max_iter - массив максимальных количеств итераций алгоритма обучения;
\param epsilon - массив малых положительных чисел, при достижении которых разностью частных производных функции Лагранжа, умноженных на соответствующие эталонные отклики, взятые с обратным знаком, очередной пары множителей Лагранжа - кандидатов на оптимизацию - процесс обучения данной SVM будет остановлен.

\return

	- 0 - в случае успеха;
	- <> 0 - в случае неудачи.

\sa fmll_svm_teach_smo.

*/
int fmll_svm_net_teach_smo(fmll_svm_net * svm_net, double ** vec, unsigned * d, unsigned vec_num, double * C, double * tau,
		int (** selector)(fmll_svm *, double **, char *, unsigned, int *, int *, double, double, double, double *, double *, double **),
		unsigned * max_iter, double * epsilon);

// ############################################################################

#endif

