
/*!

\file

\brief Нейронная сеть, состоящая из нескольких машин опорных векторов (SVM; Support Vector Machine).

Последовательность действий по использованию нейронной сети, состоящей из нескольких машин опорных векторов:

	-# Создать нейронную сеть с помощью функции fmll_svm_net_init();
	-# Обучить нейронную сеть с помощью одной из *_svm_net_teach_* функций;
	-# Прогнать нейронную сеть над целевыми векторами с помощью функции fmll_svm_net_run();
	-# Удалить нейронную сеть с помощью функции fmll_svm_net_destroy().

*/

#ifndef SVM_NET_H
#define SVM_NET_H

#include "all.h"
#include "exception.h"
#include "memory.h"
#include "xml.h"
#include "svm.h"

// ############################################################################

/*!

\brief Описатель нейронной сети, состоящей из нескольких машин опорных векторов.

*/
typedef struct t_fmll_svm_net
{

	/*! Количество машин опорных векторов в сети. */
	unsigned num;

	/*! Массив указателей на описатели машин опорных векторов. */
	fmll_svm ** svm;

} fmll_svm_net;

// ############################################################################ 

/*!

\brief Создание нейронной сети, состоящей из нескольких машин опорных векторов.

\param dim - размерность векторного пространства;
\param num - количество машин опорных векторов;
\param K - массив указателей на функции, вычисляющие ядра скалярных произведений.

\return

	- указатель на описатель нейронной сети, состоящей из нескольких машин опорных векторов, в случае его успешного создания;
	- NULL в случае неудачи.

*/
fmll_svm_net * fmll_svm_net_init(unsigned num, unsigned dim, double (** K)(const double *, const double *, unsigned));

/*!

\brief Удаление нейронной сети, состоящей из нескольких машин опорных векторов.

\param svm_net - указатель на описатель нейронной сети, состоящей из нескольких машин опорных векторов.

*/
void fmll_svm_net_destroy(fmll_svm_net * svm_net);

/*!

\brief Сохранение в XML-файл описателя нейронной сети, состоящей из нескольких машин опорных векторов.

\param svm_net - указатель на описатель нейронной сети;
\param fname_prefix - путь и имя XML-файла (к строке fname_prefix будет добавлено расширение .xml).

\return

	- 0 - в случае успешного сохранения описателя нейронной сети;
	- <> 0 - в случае некорректного завершения операции сохранения описателя нейронной сети.

*/
int fmll_svm_net_save(fmll_svm_net * svm_net, const char * fname_prefix);

/*!

\brief Загрузка из XML-файла описателя нейронной сети, состоящей из нескольких машин опорных векторов.

\param fname_prefix - путь и имя XML-файла (к строке fname_prefix будет добавлено расширение .xml);
\param K - массив указателей на функции, вычисляющие ядра скалярных произведений.

\return

	- указатель на описатель нейронной сети в случае его успешной загрузки;
	- NULL - в случае некорректного завершения операции загрузки описателя нейронной сети.

*/
fmll_svm_net * fmll_svm_net_load(const char * fname_prefix, double (** K)(const double *, const double *, unsigned));

/*!

\brief Прогон нейронной сети, состоящей из нескольких машин опорных векторов, над вектором.

\param svm_net - указатель на описатель нейронной сети;
\param vec - указатель на вектор;
\param y - указатель на массив, в который будут записаны результаты прогона каждой из SVM, составляющих нейронную сеть, над целевым вектором.

Параметр y может принимать значение NULL.

\return

	- номер машины опорных векторов, давшей результат, равный 1, если таковая машина опорных векторов одна;
	- -1 - если ни одна из машин опорных векторов не дала результат, равный 1;
	- -2 - если несколько машин опорных векторов дали результат, равный 1;
	- < -2 - в случае невозможности корректно завершить прогон машины опорных векторов над целевым вектором.

*/
int fmll_svm_net_run(fmll_svm_net * svm_net, const double * vec, double * y);

/*!

\brief Обучение нейронной сети, состоящей из нескольких машин опорных векторов, TODO.

\param svm_net - дескриптор нейронной сети;
\param vec - массив обучающих векторов;
\param d - номера классов обучающих векторов ([0, num - 1]);
\param vec_num - количество векторов в массиве обучающих векторов;
\param TODO - TODO.

Номер класса обучающего вектора должен быть равен номеру машины опорных векторов, которая должна дать на выходе 1 для данного вектора.

\return

	- 0 - в случае успеха;
	- <> 0 - в случае неудачи.

*/
// int fmll_svm_net_teach_TODO(fmll_svm * svm, double ** vec, unsigned * d, unsigned vec_num,
//		TODO);

// ############################################################################

#endif

