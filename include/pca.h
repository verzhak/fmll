
/*!

\file

\brief Нейронная сеть, используемая для анализа главных компонент (PCA - Principal Component Analysis), обучаемая по принципу самоорганизации корреляционного типа.

Последовательность действий по использованию PCA-сети:

	-# Центрировать (вычесть среднее) множество реализаций случайного вектора с помощью функции fmll_centering();
	-# Создать PCA-сеть с помощью функции fmll_pca_init();
	-# Обучить (самоорганизация) PCA-сеть с помощью функции fmll_pca_so();
	-# Прогнать PCA-сеть над целевыми векторами с помощью функции fmll_pca_run();
	-# Удалить PCA-сеть с помощью функции fmll_pca_destroy().

*/

#ifndef PCA_H
#define PCA_H

#ifdef BUILD

	#include "all.h"
	#include "exception.h"
	#include "memory.h"
	#include "weight_init.h"
	#include "xml.h"

#endif

// ############################################################################ 

/*!

\brief Описатель PCA-сети.

*/
typedef struct t_fmll_pca
{

	/*! Весы синапсов нейронов. */
	double ** w;

	/*! Вектор выходных значений. */
	double * y;

	/*! Размерность исходного векторного пространства. */
	unsigned dim;

	/*!
	 * Количество нейронов (размерность целевого векторного пространства).
	 * Должно выполняться условие: \f$ 0 ~ < ~ num ~ \le ~ dim \f$.
	 */
	unsigned num;

} fmll_pca;

// ############################################################################ 

/*!

\brief Создание PCA-сети.

\param dim - размерность исходного векторного пространства;
\param num - количество нейронов в PCA-сети (размерность целевого векторного пространства);
\param weight_init - указатель на функцию, инициализирующую веса синапсов нейронов.

Должно выполняться условие: \f$ 0 ~ < ~ num ~ \le ~ dim \f$.

\return

	- указатель на описатель PCA-сети в случае ее успешного создания;
	- NULL - в случае неудачи.

*/
fmll_pca * fmll_pca_init(unsigned dim, unsigned num, double (* weight_init)());

/*!

\brief Удаление PCA-сети.

\param pca - указатель на описатель PCA-сети.

*/
void fmll_pca_destroy(fmll_pca * pca);

/*!

\brief Сохранение в XML-файл описателя PCA-сети.

\param pca - указатель на описатель PCA-сети;
\param fname_prefix - путь и имя XML-файла (к строке fname_prefix будет добавлено расширение .xml).

\return

	- 0 - в случае успешного сохранения описателя PCA-сети;
	- <> 0 - в случае некорректного завершения операции сохранения описателя PCA-сети.

*/
int fmll_pca_save(fmll_pca * pca, const char * fname_prefix);

/*!

\brief Загрузка из XML-файла описателя PCA-сети.

\param fname_prefix - путь и имя XML-файла (к строке fname_prefix будет добавлено расширение .xml).

\return

	- указатель на описатель PCA-сети в случае его успешной загрузки;
	- NULL - в случае некорректного завершения операции загрузки описателя PCA-сети.

*/
fmll_pca * fmll_pca_load(const char * fname_prefix);

/*!

\brief Прогон PCA-сети над некоторым вектором.

\param pca - указатель на описатель PCA-сети;
\param vec - некоторый вектор.

\return указатель на результирующий вектор.

*/
const double * fmll_pca_run(fmll_pca * pca, const double * vec);

/*!

\brief Обучение (самоорганизация) PCA-сети.

\param pca - указатель на описатель PCA-сети;
\param vec - массив реализаций случайного вектора;
\param vec_num - количество реализаций случайного вектора;
\param beta_0 - начальное значение коэффициента скорости обучения, \f$\beta_0 ~ \in ~ [0, 1]\f$;
\param next_beta - указатель на функцию, пересчитывающую значение скорости обучения в начале каждой итерации обучения по значению скорости обучения на предыдущей итерации;
\param max_d - максимальное изменение весов нейронов PCA-сети на очередного итерации алгоритма самоорганизации, при котором процесс самоорганизации будет остановлен;
\param eigen - указатель на массив размерости dim, в котором будут сохранены собственные числа матрицы ковариации случайного вектора, отсортированные в порядке убывания.

<b>Реализации случайного вектора (массив vec) должны быть предварительно отцентрированы (из каждой реализации должно быть вычтено среднее по всем реализациям), что может быть выполнено с помощью функции fmll_centering().</b>

Параметр eigen может принимать значение NULL - в этом случае расчет собственных чисел матрицы ковариации выполнен не будет. Размер массива eigen должен быть равен количеству нейронов в обучаемой PCA-сети.

\return

	- 0 - в случае успеха;
	- <> 0 - в случае неудачи.

*/
int fmll_pca_so(fmll_pca * pca, double ** vec, unsigned vec_num, double beta_0, double (* next_beta)(double), double max_d, double * eigen);

// ############################################################################ 

#endif

